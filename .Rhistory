library(blogdown)
install.packages("blogdown")
install.packages("blogdown")
blogdown::install_hugo()
blogdown::new_site(theme="vaga/hugo-theme-m10c")
blogdown::stop_server()
blogdown::hugo_version()
blogdown:::new_post_addin()
blogdown:::preview_site()
blogdown:::new_post_addin()
blogdown:::preview_site()
knitr::opts_chunk$set(collapse = TRUE)
library(DAAG)
install.packages("party")
install.packages("rpart")
install.packages("rpart.plot")
install.packages("mlbench")
install.packages("pROC")
install.packages("tree")
install.packages("caret")
library(tidyverse)
library(DAAG)
library(party)
library(rpart)
library(rpart.plot)
library(mlbench)
library(pROC)
library(tree)
library(caret)
str(spam7)
mydata <- spam7
data <- spam7
str(spam7)
str(spam7)
sum(data$yesno)
count(data$yesno)
table(data$yesno)
str(data)
plot(data$dollar)
set.seed(1337)
set.seed(1337)
index <- sample(2, nrow(data), replace = T, prob = c(0.5, 0.5))
train <- data[index == 1,]
test <- data[index == 2,]
tree <- rpart(yesno ~., data = train)
rpart.plot(tree)
printcp(tree)
plotcp(tree)
knitr::opts_chunk$set(collapse = TRUE,warning=FALSE,message=F)
rpart.plot(tree)
knitr::opts_chunk$set(collapse = TRUE,warning=FALSE,message=F,fig.path = "static")
printcp(tree)
plotcp(tree)
blogdown::check_site()
rpart.plot(tree)
blogdown::check_site()
blogdown::build_site()
blogdown:::preview_site()
knitr::opts_chunk$set(collapse = TRUE,warning=FALSE,message=F,fig.path = "static")
test
library(tidyverse)
library(DAAG)
library(party)
library(rpart)
library(rpart.plot)
library(mlbench)
library(pROC)
library(tree)
library(caret)
data <- spam7
str(data)
table(data$yesno)
set.seed(1337)
index <- sample(2, nrow(data), replace = T, prob = c(0.5, 0.5))
train <- data[index == 1,]
test <- data[index == 2,]
nrow(train)
nrow(test)
nrow(train)
nrow(test)
tree <- rpart(yesno ~., data = train)
rpart.plot(tree)
56+17+27
blogdown:::preview_site()
knitr::opts_chunk$set(collapse = TRUE,warning=FALSE,message=F)
p <- predict(tree, train, type = 'class')
blogdown::hugo_build()
blogdown:::preview_site()
knitr::opts_chunk$set(collapse = TRUE,warning=FALSE,message=F)
?rpoart.plot
?rpart.plot
??rpart.plot
rpart.plot(tree,type=4,)
library(tidyverse)
library(DAAG)
library(party)
library(rpart)
library(rpart.plot)
library(mlbench)
library(pROC)
library(tree)
library(caret)
data <- spam7
str(data)
table(data$yesno)
set.seed(1337)
index <- sample(2, nrow(data), replace = T, prob = c(0.5, 0.5))
train <- data[index == 1,]
test <- data[index == 2,]
tree <- rpart(yesno ~., data = train)
rpart.plot(tree,type=4,)
rpart.plot(tree,type=4)
rpart.plot(tree,type=4,extra=101)
printcp(tree)
blogdown::hugo_build()
knitr::opts_chunk$set(collapse = TRUE,warning=FALSE,message=F)
data('BostonHousing')
data <- BostonHousing
str(data)
set.seed(1337)
ind <- sample(2, nrow(data), replace = T, prob = c(0.5, 0.5))
train <- mydata[ind == 1,]
train <- data[ind == 1,]
test <- data[ind == 2,]
train
test
ind <- sample(2, nrow(data), replace = T, prob = c(.75, .25))
set.seed(1337)
ind <- sample(2, nrow(data), replace = T, prob = c(.75, .25))
train <- data[ind == 1,]
test <- data[ind == 2,]
train
test
install.packages("caTools")
library(caTools)
ind <- sample.split(data, SplitRatio = 0.75)
train <- subset(data,split==TRUE)
ind <- sample.split(data$medv, SplitRatio = 0.75)
train <- subset(data,split==TRUE)
ind <- sample(2, nrow(data), replace = T, prob = c(.75, .25))
set.seed(1337)
ind <- sample(2, nrow(data), replace = T, prob = c(.75, .25))
train <- data[ind == 1,]
test <- data[ind == 2,]
library(readxl)
read_xlsx("C:/Users/Oskar/Downloads/rapport.xlsx")
read_xlsx("C:/Users/Oskar/Downloads/rapport.xlsx")
read_xlsx("C:/Users/Oskar/Downloads/rapport.xlsx")
read_xlsx("C:/Users/Oskar/Downloads/rapport.xlsx")
knitr::opts_chunk$set(collapse = TRUE,warning=FALSE,message=F)
plotcp(tree)
library(tidyverse)
library(DAAG)
library(party)
library(rpart)
library(rpart.plot)
library(mlbench)
library(pROC)
library(tree)
library(caret)
data <- spam7
str(data)
table(data$yesno)
set.seed(1337)
index <- sample(2, nrow(data), replace = T, prob = c(0.5, 0.5))
train <- data[index == 1,]
test <- data[index == 2,]
tree <- rpart(yesno ~., data = train)
rpart.plot(tree,type=4,extra=101)
printcp(tree)
plotcp(tree)
p <- predict(tree, train, type = 'class')
confusionMatrix(p, train$yesno)
p
confusionMatrix(p, train$yesno)
p
str(p)
for (i in 1:length(p)) {
if(p[i]==train$yesno[i]) print("Hej")
}
confusionMatrix(p, train$yesno)
for (i in 1:length(p)) {
if(p[i]=="no" & train$yesno[i]=="no") print("Hej")
}
for (i in 1:length(p)) {
if(p[i]=="no" & train$yesno[i]=="no") print("Hej")
}
for (i in 1:length(p)) {
if(p[i]=="no" && train$yesno[i]=="no") print("Hej")
}
p[1]
p[1]=="y"
p[1]=="y" & train$yesno[i]=="no"
p[1]=="y" & train$yesno[1]=="no"
f11=0
for (i in 1:length(p)) {
if(p[i]=="no" & train$yesno[i]=="no") f11 = f11+1
}
f11
train
table(p,train$yesno)
confusionMatrix(pp, test$yesno)
pp <- predict(tree, test, type = 'class')
confusionMatrix(pp, test$yesno)
t = table(p,train$yesno)
t
colnames(t)
rownames(t)
blogdown:::new_post_addin()
library(flexdashboard)
blogdown:::preview_site()
install.packages("DBI")
install.packages("dbplyr")
library(dbplyr)
library(tidyverse)
UID = rstudioapi::askForPassword("Database user")
library(RPostgreSQL)
install.packages("RPostgreSQL")
odbc::odbcListDrivers()
install.packages("odbc")
odbc::odbcListDrivers()
UID = rstudioapi::askForPassword("Database user")
rental <- DBI::dbConnect(odbc::odbc(),
driver = "PostgreSQL ANSI(x64)",
database = "dvdrental_2",
port = 5433,
host = "localhost",
UID = rstudioapi::askForPassword("Database user"))
rental_2 = DBI::dbConnect(RPostgreSQL::PostgreSQL(), "dvdrental")
library(DBI)
con <- dbConnect(odbc::odbc(), .connection_string = "Driver={SQL Server};", timeout = 10)
rental_2 = DBI::dbConnect(RPostgreSQL::PostgreSQL(), "dvdrental")
?dbConnect
rental_2 = DBI::dbConnect(RPostgreSQL::PostgreSQL(), "dvdrental",password= "84702700")
rental_2 = DBI::dbConnect(RPostgreSQL::PostgreSQL(), "dvdrental")
con <- dbConnect(RMySQL::MySQL(),
dbname = "mydb",
host = "https://predictivehacks.com/",
port = 3306,
user = rstudioapi::askForPassword("Database user"),
password = rstudioapi::askForPassword("Database password")
)
install.packages("RMySQL")
library("RMySQL")
con <- dbConnect(RMySQL::MySQL(),
dbname = "mydb",
host = "https://predictivehacks.com/",
port = 3306,
user = rstudioapi::askForPassword("Database user"),
password = rstudioapi::askForPassword("Database password")
)
con <- DBI::dbConnect(
RSQLite::SQLite(),
dbname = "020_write_sql_from_r/mpg.sqlite"
)
con <- DBI::dbConnect(
RSQLite::SQLite(),
dbname = "020_write_sql_from_r/mpg.sqlite"
)
install.packages("RSQLite")
library("RSQLite")
con <- DBI::dbConnect(
RSQLite::SQLite(),
dbname = "020_write_sql_from_r/mpg.sqlite"
)
con <- DBI::dbConnect(
RSQLite::SQLite(),
dbname = "020_write_sql_from_r/mpg.sqlite"
)
table_names <- dbListTables(con)
con <- dbConnect(odbc::odbc(), "Oracle DB")
con <- dbConnect(RSQLite::SQLite(), "mydatabase.db")
sql_file <- "GFG.sql"
sql_text <- readLines(sql_file, warn = FALSE, encoding = "UTF-8")
sql_text <- readLines(sql_file, warn = FALSE, encoding = "UTF-8")
sql_file <- "parameterized_query.sql"
sql_text <- readLines(sql_file, warn = FALSE, encoding = "UTF-8")
start_date <- "1982-01-01"
end_date <- "1983-12-31"
# Execute the SQL query with parameters and store the results in a data frame
query_result <- dbGetQuery(con, sqlInterpolate(con, paste(sql_text,
collapse = "\n"), .dots = list(start_date,
end_date)))
sql_text <- readLines(sql_file, warn = FALSE, encoding = "UTF-8")
con <- DBI::dbConnect(drv = odbc::odbc(),
Driver = "driver_name",
Server = "server_url",
Database = "database_name",
user = "user", #optional
password = "password") #optional
conn <- dbConnect(RSQLite::SQLite(), "data/mental_health.sqlite")
dbListTables(conn)
dbGetQuery(conn, "SELECT * FROM Survey")
conn <- dbConnect(SQLite(),'mycars.db')
dbWriteTable(conn, "cars", mtcars)
dbGetQuery(conn, 'CREATE TABLE test_table(id int, name text)')
dbExecute(conn, 'CREATE TABLE test_table(id int, name text)')
dbExecute(conn, 'CREATE TABLE test_t(id int, name text)')
chinook <- dbConnect(SQLite(), "chinook.db")
src_dbi(chinook)
employees <- tbl(chinook, "employees")
employees
employees <- tbl(chinook, "employees")
employees
src_dbi(chinook)
employees <- tbl(chinook, "employees")
dbDisconnect()
employees <- tbl(chinook, "employees")
install.packages("bigrquery")
library("bigrquery")
billing <- "for875-databases"
con <- dbConnect(
bigquery(),
project = "publicdata",
dataset = "samples",
billing = billing
)
shakespeare <- con %>%
tbl("shakespeare")
shakespeare %>%
group_by(word) %>%
summarise(n = sum(word_count, na.rm = TRUE)) %>%
arrange(desc(n)) %>%
head(10)
shakespeare <- con %>%
tbl("shakespeare")
con <- dbConnect(
bigquery(),
project = "publicdata",
dataset = "samples",
billing = billing
)
shakespeare <- con %>%
tbl("shakespeare")
library(httr)
library(jsonlite)
library(readr)
library(kaggler)
install.packages("kaggler")
library(kaggler)
setwd("C:/Users/Oskar/Documents/R/kaggle")
kgl_auth(creds_file = 'kaggle.json')
library(kaggler)
install.packages("kaggler")
library(kaggler)
install.packages('RcmdrPlugin.IPSUR', lib = "/kaggle/working")
library(RcmdrPlugin.IPSUR, lib = "/kaggle/working")
kgl_auth(creds_file = 'kaggle.json')
library(kaggler)
install.packages("kaggler")
blogdown:::new_post_addin()
knitr::opts_chunk$set(collapse = TRUE,warning=FALSE,message=F)
data <- read.csv("C:/Users/Oskar/Documents/R/OskarMikko/OskarMikko/data/london_bike_sharing_data/london_merged.csv")
head(data)
head(data)
library(tidyverse)
head(data)
ggplot(data,
aes(timestamp,cnt, color=weather_code)) + geom_line()
ggplot(data,
aes(timestamp,cnt, color=weather_code)) + geom_point()
ggplot(data,
aes(timestamp,cnt, color=as.factor(weather_code))) + geom_point()
data %>%
group_by(weather_code) %>%
summarise(cnt)
data %>%
group_by(as.factor(weather_code)) %>%
summarise(cnt)
head(data)
data$timestamp <- as.Date(data$timestamp)
str(data)
data$timestamp
?as.Date
data$date <- as.Date(data$timestamp)
data %>%
group_by(date,as.factor(weather_code)) %>%
summarise(cnt)
ggplot(data,
aes(x=date,y=cnt,group=as.factor(weather_codes)))
ggplot(data,
aes(x=date,y=cnt,group=as.factor(weather_code)))
ggplot(data,
aes(x=date,y=cnt,group=as.factor(weather_code))) + geom_line()
